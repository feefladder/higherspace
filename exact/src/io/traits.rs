use lyn::Error;

use crate::{expr_rc::Expr, structs::Const};

pub trait ParseDisplay {
  fn parse_display(input: String) -> Result<Expr, Error>;
}

/// Name of an Expr variant. Should return char
/// Val  -> Î¾
/// Const -> <char of const>
/// Sum  -> Î£
/// Prod -> Î 
/// Sqrt -> âˆš
/// For sin, cos, tan, they are a clock based on this triangle:
/// Cos   Sin   Tan
/// ____
/// |  /  /|    /|
/// |-/  / |   / |
/// |/  /\_|  /\_|
/// Cos Sin Tan
/// |/  /|  _|
/// ðŸ•‘  ðŸ•¢  ðŸ•˜
/// Sin  -> ðŸ•¢
/// Cos  -> ðŸ•‘
/// Tan  -> ðŸ•˜
pub trait Char {
  fn ch(&self) -> char;
}

/// Const -> <char of const>
// impl Char for Const {
//   fn ch(&self) -> char {
//     self.ch
//   }
// }

/// Name of an Expr variant. Should return char
/// Val  -> Î¾
/// Const -> <char of const>
/// Sum  -> Î£
/// Prod -> Î 
/// Sqrt -> âˆš
/// For sin, cos, tan, they are a clock based on this triangle:
/// Cos   Sin   Tan
/// ____
/// |  /  /|    /|
/// |-/  / |   / |
/// |/  /\_|  /\_|
/// Cos Sin Tan
/// |/  /|  _|
/// ðŸ•‘  ðŸ•¢  ðŸ•˜
/// Sin  -> ðŸ•¢
/// Cos  -> ðŸ•‘
/// Tan  -> ðŸ•˜
impl Char for Expr {
    fn ch(&self) -> char {
        match self {
          Expr::Val(_) => 'Î¾',
          Expr::Const(c) => c.ch(),
          Expr::Sum(_) => 'Î£',
          Expr::Prod(_) => 'Î ',
          Expr::Sqrt(_) => 'âˆš',
        }
    }
}

#[cfg(test)]
mod test_io_traits{
  use super::*;
  use crate::expr_rc::Expr;

  #[test]
  fn test_expr_char() {
    assert_eq!(Expr::val_i(2).ch(),'Î¾');
    assert_eq!(Expr::c_pi().ch(),'Ï€');
    assert_eq!(Expr::sum_i_pi(2).ch(),'Î£');
    assert_eq!(Expr::prod_pi_i(1).ch(),'Î ');
    assert_eq!(Expr::sqrt_i(5).ch(),'âˆš');
  }
}